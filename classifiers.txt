from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier
from sklearn import linear_model, metrics, svm
from sklearn.lda import LDA
from mne.decoding import CSP

def train_model(classifier, feature_vector_train, train_label, feature_vector_valid, test_label):
    
    # fit the training dataset on the classifier
    classifier.fit(feature_vector_train, train_label)
    
    # predict the labels on validation dataset
    predictions = classifier.predict(feature_vector_valid)
    
    return metrics.accuracy_score(predictions, test_label)

#TODO: HYPERPARAMATER TUNING
#    :  CV

# Logistic Regression
#https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html
accuracy = train_model(linear_model.LogisticRegression(), train_x, train_y, test_x, test_y)
print("Log Reg: ", accuracy)

# Linear SVM
#https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html
accuracy = train_model(svm.SVC(kernel='linear'), train_x, train_y, test_x, tesy_y)
print("SVM-linear: ", accuracy)

#Random Forest
#https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html
accuracy = train_model(RandomForestClassifier(n_estimators=150, n_jobs=-1, criterion="entropy", random_state=1), train_x, train_y, test_x, tesy_y)
print("Random Forest: ", accuracy)

#Gradient Boosting
#https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html
accuracy = train_model(GradientBoostingClassifier(), train_x, train_y, test_x,test_y)
print("Gradient Boosting: ", accuracy)

#LDA
#https://scikit-learn.org/0.16/modules/generated/sklearn.lda.LDA.html
accuracy = train_model(LDA(),train_x, train_y, test_x, test_y)
print("LDA: ", accuracy)


#CSP (Supervised Dimension Reduction)
#https://mne.tools/stable/generated/mne.decoding.CSP.html
csp = CSP(reg='lws')
csp.fit(X,Y)
print("CSP: ", accuracy)